# lets toss an image onto my server and pbcopy that bitch.
function scpp() {

	apikey="b3625162d3418ac51a9ee805b1840452"
	
	clip=""
	errors=false
	
	# loop through arguments
	while [ $# -gt 0 ]; do
		file="$1"
		shift
	
		# check file exists
		if [ ! -f "$file" ]; then
			echo "file '$file' doesn't exist, skipping" >&2
			errors=true
			continue
		fi
	
		# upload the image
		response=$(curl -F "key=$apikey" -H "Expect: " -F "image=@$file" \
			http://imgur.com/api/upload.xml 2>/dev/null)
		# the "Expect: " header is to get around a problem when using this through 
		# the Squid proxy. Not sure if it's a Squid bug or what.
		if [ $? -ne 0 ]; then
			echo "Upload failed" >&2
			errors=true
			continue
		elif [ $(echo $response | grep -c "<error_msg>") -gt 0 ]; then
			echo "Error message from imgur:" >&2
			echo $response | sed -r 's/.*<error_msg>(.*)<\/error_msg>.*/\1/' >&2
			errors=true
			continue
		fi
	
		# parse the response and output our stuff
		url=$(echo $response | sed -r 's/.*<original_image>(.*)<\/original_image>.*/\1/')
		deleteurl=$(echo $response | sed -r 's/.*<delete_page>(.*)<\/delete_page>.*/\1/')
		echo $url
		echo "Delete page: $deleteurl" >&2
	
		# append the URL to a string so we can put them all on the clipboard later
		clip="$clip$url
	"
	done

    echo $clip | pbcopy;
    echo "Copied to clipboard: $clip"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

# take this repo remove the .git stuff.
function gitclean(){
	find . -name ".git" -exec rm -rf {} \;
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}


# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

